plugins {
    id 'java'
    id 'application'
    id 'jacoco'
}

mainClassName = 'exercises.lifts.LiftController'

group 'lifts'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/org.testng/testng
    testCompile group: 'org.testng', name: 'testng', version: '6.14.3'

}

test { //this is the gradle task to be executed
    useTestNG() { //Tells Gradle to use TestNG
        useDefaultListeners = true // Tells TestNG to execute its default reporting structure
        suites 'src/test/suite.xml' //location of our suite.xml
    }
}

task smokeTests(type: Test) { // we define a task with name ‘smokeTests’
   useTestNG() {
       useDefaultListeners = true
       suites 'src/test/suite.xml'
       includeGroups 'smoke' // We define the group name by using ‘includeGroups’ parameter.
   }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

task printTotalCoverage(dependsOn: 'jacocoTestReport') {
    doLast {
        def testReportFile = project.file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        if (testReportFile.exists()) {
            def rootNode = new XmlParser(false, false).parseText(testReportFile.text.replaceAll("<!DOCTYPE[^>]*>", ""))
            def totalCovered = 0
            def totalMissed = 0
            rootNode.counter.each { counter ->
                try {
                    totalCovered += Integer.valueOf(counter.@covered as String)
                    totalMissed += Integer.valueOf(counter.@missed as String)
                } catch (ignore) {}
            }
            // Test coverage parsing regex: Total:\s[\d\.\,]+%
            println "Coverage Total: ${String.format('%.2f', 100.0 * totalCovered / (totalMissed + totalCovered))}%"
        }
    }
}

sourceSets.main.resources { srcDirs = ["src/main/java"]; include "**/*.*" }
